version: "3.7"

services:
  application:
    environment:
      event.dispatcher.uri: "http://event-dispatcher-application:8080/events/dispatch"
    depends_on:
      event-dispatcher-application:
        condition: service_started
  event-dispatcher-application:
    container_name: event-dispatcher-application
    image: goafabric/event-dispatcher-service-native${_Values_server_arch}:3.1.1-SNAPSHOT
    restart: 'no'
    command: -Xmx32m

    healthcheck:
      test: "curl -f http://localhost:8080/actuator/health || exit 1"
      disable: true #disabled for native images because of no curl
      interval: 10s
      timeout: 10s
      retries: 5

    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "8080"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #broker
      spring.rabbitmq.host: "rabbitmq"
      spring.kafka.bootstrap-servers: "kafka:9092"

      #profile
      spring.profiles.active: rabbitmq

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"
    depends_on:
      rabbitmq:
        condition: service_started

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12.1-management
    restart: 'no'
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      #secrets
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    volumes:
      - rabbitdata:/var/lib/rabbitmq
    networks:
      - ${_Values_root_name}-net

volumes:
    tmp:
    applogs:
    rabbitdata:

networks:
  event-dispatcher-service-net:
    driver: bridge